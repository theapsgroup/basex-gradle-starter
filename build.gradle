buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.4'
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.bluepapa32.watch'

repositories {
    maven { url "http://files.basex.org/maven" }
    maven { url "http://xqj.net/maven" }
    mavenCentral()
}

// distributions will be called basex-demo-0.1.zip
applicationName = 'basex-demo'
version = '0.1'
mainClassName = 'org.basex.BaseXHTTP'
applicationDefaultJvmArgs = [
    "-Dorg.basex.dbpath=${System.properties['org.basex.DBPATH']}",
    "-Dorg.basex.repopath=${System.properties['org.basex.REPOPATH']}",
    "-Dorg.basex.webpath=${System.properties['org.basex.WEBPATH']}",
    "-Dorg.basex.mixupdates=${System.properties['org.basex.MIXUPDATES']}",
    "-Dorg.basex.globallock=${System.properties['org.basex.GLOBALLOCK']}"]

applicationDistribution.from("basex") {
  include "**/*.*"
  into "basex"
}

watch {
    xqtest {
        files fileTree(dir: file('basex/webapp/test'),
                       include: '**/*.xqm')
        tasks 'xqtest'
    }
}

def jettyVersion = '8.1.16.v20140903'

dependencies {
    runtime "org.basex:basex-api:8.2.3"
    // XQJ API
    runtime "net.xqj:basex-xqj:1.4.0"
    runtime "com.xqj2:xqj2:0.1.0"
    runtime "javax.xml.xquery:xqj-api:1.0"
    // HTTP server
    runtime "org.eclipse.jetty:jetty-continuation:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-http:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-io:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-security:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-server:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-util:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-xml:${jettyVersion}"
    // XSLT 2.0
    runtime "net.sf.saxon:Saxon-HE:9.6.0-6"
    // HTML parsing
    runtime "org.ccil.cowan.tagsoup:tagsoup:1.2.1"
    // XML catalogs
    runtime "xml-resolver:xml-resolver:1.2"
}

// shadowPlugin adds a promo banner task, no thanks!
tasks.remove(knows)

task server(type: JavaExec) {
    description "Start BaseX database server."
    classpath configurations.runtime
    main = "org.basex.BaseXServer"
    systemProperties System.getProperties()
}

task serverstop(type: JavaExec) {
    description "Stop BaseX HTTP server."
    classpath configurations.runtime
    main = "org.basex.BaseXServer"
    args "stop"
    systemProperties System.getProperties()
}

// alias for gradlew run
task http(dependsOn: run) {
    description "Run BaseX HTTP and database server."
}

task httpstop(type: JavaExec) {
    description "Stop BaseX HTTP and database server."
    classpath configurations.runtime
    main = "org.basex.BaseXHTTP"
    args "stop"
    systemProperties System.getProperties()
}

// although typing works, the standard gradle build message
// makes this awkward. 
// See also https://issues.gradle.org/browse/GRADLE-1168
task console(type: JavaExec) {
    description "Start BaseX client console."
    standardInput = System.in
    classpath configurations.runtime
    main = "org.basex.BaseX"
    systemProperties System.getProperties()
}

task query(type: JavaExec) {
    description "Start a simple query."
    classpath configurations.runtime
    main = "org.basex.BaseX"
    args "-q", project.hasProperty('q') ? q : "'Please provide a query! Example: gradlew query -Pq=1+1'"
    systemProperties System.getProperties()
}

task create(type: JavaExec) {
    description "Create a database and import XML files from a directory."
    classpath configurations.runtime
    main = "org.basex.BaseX"
    args "-c", project.hasProperty('dir') && project.hasProperty('db') ? "CREATE DB $db ${file(dir)}" : "'Please provide a db and dir! Example: gradlew create -Pdb=foo -Pdir=bar'"
    systemProperties System.getProperties()
}

task export(type: JavaExec) {
    description "Create a database and import XML files from a directory."
    classpath configurations.runtime
    main = "org.basex.BaseX"
    args "-c", project.hasProperty('dir') && project.hasProperty('db') ? "OPEN $db\nEXPORT ${file(dir)}" : "'Please provide a db and dir! Example: gradlew export -Pdb=foo -Pdir=bar'"
    systemProperties System.getProperties()
}

task xqtest(type: JavaExec) {
    description "Runs all tests."
    classpath configurations.runtime
    main = "org.basex.BaseX"
    args "-t", file(System.properties['org.basex.WEBPATH'])
    systemProperties System.getProperties()
    ignoreExitValue true
}

task gui << {
    ant.java(
        fork: true, 
        spawn: true, 
        classpath: configurations.runtime.asPath, 
        classname: "org.basex.BaseXGUI",
        clonevm: true)
}
gui.description "Run BaseX GUI."
